name: EarlyAccess

on:
  push:
    branches: [ main ]

env:
  GRAAL_DISTRIBUTION: 'mandrel'
  JAVA_VERSION: '22'
  JAVA_DISTRO: 'temurin'

jobs:
  precheck:
    if: github.repository == 'jtama/helm-to-asciidoc' && startsWith(github.event.head_commit.message, '🏁 Releasing version') != true && startsWith(github.event.head_commit.message, '⬆️  Next version') != true
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Version
        id: vars
        shell: bash
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$(echo $version)" >>$GITHUB_OUTPUT

  # Build native executable per runner
  build:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1.2.2
        with:
          version: ${{ env.GRAAL_VERSION }}
          java-version: ${{ env.JAVA_VERSION }}
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Build Native Image'
        run: ./mvnw -B -ntp --file pom.xml -Pnative package

      - name: 'Create distribution'
        run: ./mvnw -B -ntp --file pom.xml -Pdist package -DskipTests

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v4.3.6
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            target/distributions/*.zip
            target/distributions/*.tar.gz

  # Merge native executables into the same directory
  merge:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: artifacts
          pattern:  artifacts-*


  # Collect all executables and release
  release:
    needs: [ merge ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v4.1.8

      - name: 'Set up Java'
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./mvnw -B -ntp --file pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release